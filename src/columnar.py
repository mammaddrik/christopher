def columnar_encrypt(text: str, key: int) -> str:
    """
    Encrypts the given plaintext using the columnar transposition cipher technique.

    Parameters:
    text (str): The plaintext message to be encrypted.
    key (int): The key (integer) specifying the number of columns for transposition.

    Returns:
    str: The encrypted ciphertext generated by the columnar transposition cipher.

    Example:
        >>> columnar_encrypt("christopher", 3)
        'cioehsprrth'
    """
    output = [''] * key
    for columnIndex in range(key):
        textIndex = columnIndex
        while textIndex < len(text):
            output[columnIndex] += text[textIndex]
            textIndex += key
    return "".join(output)

def columnar_decrypt(ciphertext: str, key: int) -> str:
    """
    Decrypts the given ciphertext using the columnar transposition cipher technique.

    Parameters:
    ciphertext (str): The encrypted message to be decrypted.
    key (int): The key (integer) specifying the number of columns used during encryption.

    Returns:
    str: The decrypted plaintext obtained from the columnar transposition cipher.

    Example:
        >>> columnar_decrypt("cioehsprrth", 3)
        'christopher'
    """
    column = key
    row = int(len(ciphertext) / column) + 1
    row, column = column, row
    shaded_count = (row * column) - len(ciphertext)
    ciphertext = list(ciphertext)
    ciphertext.reverse()
    for i in range(shaded_count):
        index = i * column
        ciphertext.insert(index, chr(0))
    ciphertext.reverse()
    ciphertext = "".join(ciphertext)
    output = [''] * column
    for columnIndex in range(column):
        ciphertextIndex = columnIndex
        while ciphertextIndex < len(ciphertext):
            output[columnIndex] += ciphertext[ciphertextIndex]
            ciphertextIndex += column
    output = "".join(output)
    return output.replace(chr(0), "")